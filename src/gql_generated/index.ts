import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };

function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/graphql", {
    method: "POST",
    ...({"headers":{"Content-Type":"application/json"}}),
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  }
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601Date: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

/** Autogenerated input type of CreateUserWithSupabase */
export type CreateUserWithSupabaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  token: Scalars['String']['input'];
};

/** Autogenerated return type of CreateUserWithSupabase. */
export type CreateUserWithSupabasePayload = {
  __typename?: 'CreateUserWithSupabasePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type Expense = {
  __typename?: 'Expense';
  amount: Scalars['Float']['output'];
  date: Scalars['ISO8601Date']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
  user: User;
};

/** Autogenerated input type of ExpenseCreate */
export type ExpenseCreateInput = {
  amount: Scalars['Float']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  date: Scalars['ISO8601Date']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of ExpenseCreate. */
export type ExpenseCreatePayload = {
  __typename?: 'ExpenseCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  expense: Expense;
};

/** Autogenerated input type of ExpenseDelete */
export type ExpenseDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ExpenseDelete. */
export type ExpenseDeletePayload = {
  __typename?: 'ExpenseDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ExpenseUpdate */
export type ExpenseUpdateInput = {
  amount: Scalars['Float']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  date: Scalars['ISO8601Date']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  title: Scalars['String']['input'];
};

/** Autogenerated return type of ExpenseUpdate. */
export type ExpenseUpdatePayload = {
  __typename?: 'ExpenseUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  expense: Expense;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUserWithSupabase?: Maybe<CreateUserWithSupabasePayload>;
  expenseCreate?: Maybe<ExpenseCreatePayload>;
  expenseDelete?: Maybe<ExpenseDeletePayload>;
  expenseUpdate?: Maybe<ExpenseUpdatePayload>;
};


export type MutationCreateUserWithSupabaseArgs = {
  input: CreateUserWithSupabaseInput;
};


export type MutationExpenseCreateArgs = {
  input: ExpenseCreateInput;
};


export type MutationExpenseDeleteArgs = {
  input: ExpenseDeleteInput;
};


export type MutationExpenseUpdateArgs = {
  input: ExpenseUpdateInput;
};

export type Query = {
  __typename?: 'Query';
  expenses: Array<Expense>;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  supabaseMetadata?: Maybe<Scalars['JSON']['output']>;
};

export type CreateUserWithSupabaseMutationVariables = Exact<{
  token: Scalars['String']['input'];
}>;


export type CreateUserWithSupabaseMutation = { __typename?: 'Mutation', createUserWithSupabase?: { __typename?: 'CreateUserWithSupabasePayload', errors: Array<string>, user?: { __typename?: 'User', id: string, email: string, name?: string | null, supabaseMetadata?: any | null } | null } | null };

export type FetchExpensesQueryVariables = Exact<{ [key: string]: never; }>;


export type FetchExpensesQuery = { __typename?: 'Query', expenses: Array<{ __typename?: 'Expense', id: string, title: string, description: string, amount: number, date: any }> };



export const CreateUserWithSupabaseDocument = `
    mutation CreateUserWithSupabase($token: String!) {
  createUserWithSupabase(input: {token: $token}) {
    user {
      id
      email
      name
      supabaseMetadata
    }
    errors
  }
}
    `;

export const useCreateUserWithSupabaseMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateUserWithSupabaseMutation, TError, CreateUserWithSupabaseMutationVariables, TContext>) => {
    
    return useMutation<CreateUserWithSupabaseMutation, TError, CreateUserWithSupabaseMutationVariables, TContext>(
      ['CreateUserWithSupabase'],
      (variables?: CreateUserWithSupabaseMutationVariables) => fetcher<CreateUserWithSupabaseMutation, CreateUserWithSupabaseMutationVariables>(CreateUserWithSupabaseDocument, variables)(),
      options
    )};

export const FetchExpensesDocument = `
    query fetchExpenses {
  expenses {
    id
    title
    description
    amount
    date
  }
}
    `;

export const useFetchExpensesQuery = <
      TData = FetchExpensesQuery,
      TError = unknown
    >(
      variables?: FetchExpensesQueryVariables,
      options?: UseQueryOptions<FetchExpensesQuery, TError, TData>
    ) => {
    
    return useQuery<FetchExpensesQuery, TError, TData>(
      variables === undefined ? ['fetchExpenses'] : ['fetchExpenses', variables],
      fetcher<FetchExpensesQuery, FetchExpensesQueryVariables>(FetchExpensesDocument, variables),
      options
    )};
